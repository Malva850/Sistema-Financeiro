unit UCategorias;

interface


type
  TCategorias = class
  private
    FCdCategoria: Integer;
    FNmCategoria: String;
    procedure SetCdCategoria(const Value: Integer);
    procedure SetNmCategoria(const Value: String);


  protected

  public
    constructor create;
    function Inserir(var PCodigo : Integer): Boolean;


  published
    property CdCategoria : Integer  read FCdCategoria write SetCdCategoria;
    property NmCategoria : String  read FNmCategoria write SetNmCategoria;

  end;


implementation

{ TCategorias }

uses UDM, System.SysUtils;



{ TCategorias }

constructor TCategorias.create;
begin
  CdCategoria := 0;
  NmCategoria := '' ;
end;

function TCategorias.Inserir(var PCodigo : Integer): Boolean;
begin
  try

    dm.DBFinanceiro.StartTransaction;

    FCdCategoria := DM.GeraSequencial('GEN_CATEGORIAS') ;

    PCodigo := FCdCategoria;

    dm.QInsere.Close;
    dm.QInsere.SQL.Clear;
    dm.QInsere.SQL.Add(' INSERT INTO CATEGORIAS (CD_CATEGORIA, NM_CATEGORIA)'+
                       ' VALUES (:PCD_CATEGORIA, :PNM_CATEGORIA)');
    dm.QInsere.ParamByName('PCD_CATEGORIA').AsInteger := FCdCategoria ;
    dm.QInsere.ParamByName('PNM_CATEGORIA').AsString  := FNmCategoria;
    dm.QInsere.ExecSQL;

    dm.DBFinanceiro.Commit;
    dm.DBFinanceiro.CommitRetaining;

    Result := true;


  except
    on E: Exception do
    begin
      dm.DBFinanceiro.Rollback;

      Result := false;

    end;

  end;

end;

procedure TCategorias.SetCdCategoria(const Value: Integer);
begin
  FCdCategoria := Value;
end;

procedure TCategorias.SetNmCategoria(const Value: String);
begin
  FNmCategoria := Value;
end;

end.
